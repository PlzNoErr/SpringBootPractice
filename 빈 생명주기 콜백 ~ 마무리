=> 빈의 생명주기
- @PostConstruct, @PreDestroy 애노테이션 특징
최신 스프링에서 가장 권장하는 방법이다.
애노테이션 하나만 붙이면 되므로 매우 편리하다.
패키지를 잘 보면 javax.annotation.PostConstruct 이다. 스프링에 종속적인 기술이 아니라 JSR-250
라는 자바 표준이다. 따라서 스프링이 아닌 다른 컨테이너에서도 동작한다.
컴포넌트 스캔과 잘 어울린다.
유일한 단점은 외부 라이브러리에는 적용하지 못한다는 것이다. 외부 라이브러리를 초기화, 종료 해야 하면 @Bean의 기능을 사용하자.

 - 정리
 @PostConstruct, @PreDestroy 애노테이션을 사용하자
코드를 고칠 수 없는 외부 라이브러리를 초기화, 종료해야 하면 @Bean 의 initMethod , destroyMethod
를 사용하자

-----------------------------------------------------------------------------------------------------------------------------------------------------

 - 빈 스코프란?
지금까지 우리는 스프링 빈이 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될 때
까지 유지된다고 학습했다. 이것은 스프링 빈이 기본적으로 싱글톤 스코프로 생성되기 때문이다. 스코프는
번역 그대로 빈이 존재할 수 있는 범위를 뜻한다.
스프링은 다음과 같은 다양한 스코프를 지원한다.
 - 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
 - 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
  => 관리 안한다는 뜻은 요청 받는 시점에 빈을 생성하고 의존관계 주입하고 초기화 해서 반환하고 손을 놓는다. 즉 죽는지 사는지 스프링은 손을 땐다.
  => 같은 요청이 올때마다 새로운 친구를 만들어서 계속 던져준다. 인스턴스를 종료시킬꺼면 이제 모든 책임은 클라이언트에게로 넘어간다.
  => @Scope("prototype") 등록할때 어노테이션을 붙이면 된다.

- 웹 관련 스코프
request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.
session: 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.

 - 정리
 핵심은 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는
것이다. 클라이언트에 빈을 반환하고, 이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다.
프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다. 그래서 "@PreDestroy" 같은 종료
메서드가 호출되지 않는다. 특별하게 새로 요청할때마다 새로운 빈을 생성받고 싶다면 프로토타입을 활용할 수 있다.
 => 정말정말 특별한 일 아니면 굳이 싱글톤 냅두고 프로토타입을 사용할 일은 없다. 

 참고: 만약 프로토타입을 부득이하게 부작용없이 싱글통과 혼용으로 사용하려면 자바 표준인 JSR-330 Provider를 사용할 것인지, 아니면 스프링이 제공하는
ObjectProvider를 사용할 것인지 고민이 될 것이다. ObjectProvider는 DL을 위한 편의 기능을 많이 제공해주고 스프링 외에 별도의 의존관계 추가가 필요 없기 때문에 편리하다. 
만약(정말 그럴일은 거의 없겠지만) 코드를 스프링이 아닌 다른 컨테이너에서도 사용할 수 있어야 한다면 JSR-330 Provider를 사용해야한다.
  > 스프링을 사용하다 보면 이 기능 뿐만 아니라 다른 기능들도 자바 표준과 스프링이 제공하는 기능이
겹칠때가 많이 있다. 대부분 스프링이 더 다양하고 편리한 기능을 제공해주기 때문에, 특별히 다른
컨테이너를 사용할 일이 없다면, 스프링이 제공하는 기능을 사용하면 된다

===> 웹 스코프의 응용에 대해서는 해당 기능을 사용할때 Web MVC에서 다시 살펴보자. 이해가 쉽지 않다...

---------------------------------------------------------------------------------------------------------------------------

